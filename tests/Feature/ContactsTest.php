<?php

namespace Tests\Feature;


use Illuminate\Foundation\Testing\WithFaker;
use App\Contact;
use App\User;
use Carbon\Carbon;
use Symfony\Component\HttpFoundation\Response;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class ContactsTest extends TestCase
{
    use RefreshDatabase;

    protected $user;

    protected function setUp(): void
    {
        parent::setUp();  //  TODO: Change the autogenerated stub
        $this->user = factory(User::class)->create();
    }

    
    public function testListOfContactsCanBeFetched()
    {
        //$this->withoutExceptionHandling();

        $user = factory(User::class)->create();
        $anotherUser = factory(User::class)->create();

        $contact = factory(Contact::class)->create(['user_id' => $user->id]);
        $anotherContact = factory(Contact::class)->create(['user_id' => $anotherUser->id]);

        $response = $this->get('/api/contacts?api_token=' . $user->api_token);

 //       dd(json_decode($response->getContent()));

        $response->assertJsonCount(1)
        ->assertJson([
            'data' => [
                [
                    "data" => [
                        'contact_id' => $contact->id
                    ]
                ]
            ]
        ]);

    }
    

    public function testUnauthUsers()
    {

        $response = $this->post( '/api/contacts', ['api_token' => '']);

        $response->assertRedirect('/login');
        $this->assertCount(0, Contact::all());
//        $response = $this->post('/api/contacts',
//            array_merge($this->data(), ['api_token' => '']));

//        $response->assertRedirect('/login');
//        $this->assertCount(0, Contact::all());
    }

    public function testAuthUserAddContact()
    {
    
  //      $this->withoutExceptionHandling();

        $response = $this->post( '/api/contacts', $this->data());

        $contact = Contact::first();

        $this->assertEquals('Test Name', $contact->name);
        $this->assertEquals('test@email.com', $contact->email);
        $this->assertEquals('08/04/1992', $contact->birthday->format('m/d/Y'));
        $this->assertEquals('Valtech Corporation', $contact->company);

        $response->assertStatus(Response::HTTP_CREATED);
        $response->assertJson([
            'data' => [
                'contact_id' => $contact->id,
            ],
            'links' => [
                'self' => $contact->path(),
            ]
        ]);

    }

    public function testFieldsAreRequired()
    {
        collect(['name', 'email', 'birthday', 'company'])
            ->each( function($field) {
                $response = $this->post( '/api/contacts', 
                    array_merge($this->data(), [ $field => '']));
    
                $response->assertSessionHasErrors($field);
                $this->assertCount(0, Contact::all());
            });
    }

    public function testEmailMustBeValid() 
    {
   
        $response = $this->post( '/api/contacts', 
            array_merge($this->data(), [ 'email' => 'NO AN EMAIL']));

            $response->assertSessionHasErrors('email');
            $this->assertCount(0, Contact::all());
    }

    public function testBirthdaysAreProperlyStored()
    {
        $this->withExceptionHandling();
        $response = $this->post( '/api/contacts', $this->data());

            $this->assertCount(1, Contact::all());    
            $this->assertInstanceOf(Carbon::class, Contact::first()->birthday); 
            $this->assertEquals('08/04/1992', Contact::first()->birthday->format('m/d/Y'));
    }

    public function testContactCanBeRetrieved()
    {
        $contact = factory(Contact::class)->create(['user_id' => $this->user->id]);

        $response = $this->get('/api/contacts/' . $contact->id . '?api_token=' . $this->user->api_token);

 //       dd(json_decode($response->getContent()));

        $this->assertTrue(true);

        $response->assertJson([
            'data' => [
                'contact_id' => $contact->id,
                'name' => $contact->name,
                'email' => $contact->email,
                'birthday' => $contact->birthday->format('m/d/Y'),
                'company' => $contact->company,
                'last_updated' => $contact->updated_at->diffForHumans(),
            ]
        ]);

    }

    public function testOnlyUsersContactsRetrieved()
    {
        $contact = factory(Contact::class)->create(['user_id' => $this->user->id]);

        $user2 = factory(User::class)->create();

        $response = $this->get('/api/contacts/' . $contact->id . '?api_token=' . $user2->api_token);

        $response->assertStatus(403);

    }

    public function testContactCanBePatched()
    {
        $contact = factory(Contact::class)->create(['user_id' => $this->user->id]);

        $response = $this->patch('/api/contacts/' . $contact->id, $this->data());

        $contact = $contact->fresh();

//        $this->assertTrue(true);

        $this->assertEquals('Test Name', $contact->name);
        $this->assertEquals('test@email.com', $contact->email);
        $this->assertEquals('08/04/1992', $contact->birthday->format('m/d/Y'));
        $this->assertEquals('Valtech Corporation', $contact->company);
        $response->assertStatus(Response::HTTP_OK);
        $response->assertJson([
            'data' => [
                'contact_id' => $contact->id,
            ],
            'links' => [
                'self' => $contact->path(),
            ]
        ]);

    }

    public function testOnlyOwnerCanPatchContact()
    {
        $contact = factory(Contact::class)->create();

        $user2 = factory(User::class)->create();

        $response = $this->patch('/api/contacts/' . $contact->id, 
        array_merge($this->data(), ['api_token' => $user2->api_token]));

        $response->assertStatus(403);

    }

    public function testContactCanBeDeleted()
    {
        $contact = factory(Contact::class)->create(['user_id' => $this->user->id]);

        $response = $this->delete('/api/contacts/' . $contact->id, 
            ['api_token' => $this->user->api_token]);

        $this->assertCount(0, Contact::all());
        $response->assertStatus(Response::HTTP_NO_CONTENT);

    }

    public function testOnlyOwnerCanDeleteContat()
    {
        $contact = factory(Contact::class)->create();

        $user2 = factory(User::class)->create();

        $response = $this->delete('/api/contacts/' . $contact->id, 
        ['api_token' => $this->user->api_token]);

        $response->assertStatus(403);

    }

    private function data()
    {
        return [
            'name' => 'Test Name',
            'email' => 'test@email.com',
            'birthday' => '08/04/1992',
            'company' => 'Valtech Corporation',
            'api_token' => $this->user->api_token,
        ];
    }


}


